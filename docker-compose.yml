
version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: sgi-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - sgi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"

  postgres:
    image: postgres:16-alpine
    container_name: sgi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sgi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: sgi-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - sgi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sgi-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      API_PORT: 3001
      CORS_ORIGIN: https://${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sgi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sgi-api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.sgi-api.entrypoints=websecure"
      - "traefik.http.routers.sgi-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.sgi-api.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.sgi-sec.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.sgi-sec.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.sgi-sec.headers.stsPreload=true"
      - "traefik.http.middlewares.sgi-sec.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.sgi-sec.headers.frameDeny=true"
      - "traefik.http.middlewares.sgi-sec.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.sgi-sec.headers.browserXssFilter=true"
      - "traefik.http.middlewares.sgi-sec.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.routers.sgi-api.middlewares=sgi-sec@docker"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sgi-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN}
      NEXTAUTH_URL: https://${DOMAIN}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      - backend
    networks:
      - sgi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sgi-web.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.sgi-web.entrypoints=websecure"
      - "traefik.http.routers.sgi-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.sgi-web.loadbalancer.server.port=3000"
      - "traefik.http.routers.sgi-web.middlewares=sgi-sec@docker"

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  traefik-certificates:
    driver: local

networks:
  sgi-network:
    driver: bridge
