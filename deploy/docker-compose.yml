
version: "3.9"

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=false"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./traefik-dynamic:/etc/traefik/dynamic:ro"
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - traefik-network
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: sgi_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - traefik-network
    restart: unless-stopped

  api-backend:
    image: ghcr.io/luishspontes/sgi-api:latest
    container_name: sgi_api
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${API_PORT}
    depends_on:
      - db
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_API}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=${API_PORT}"
      - "traefik.http.routers.api.middlewares=security-headers@file"
    restart: unless-stopped

  web-frontend:
    image: ghcr.io/luishspontes/sgi-web:latest
    container_name: sgi_web
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      OIDC_ISSUER_URL: ${OIDC_ISSUER_URL}
      PORT: ${WEB_PORT}
    depends_on:
      - api-backend
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN_WEB}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=${WEB_PORT}"
      - "traefik.http.routers.web.middlewares=security-headers@file"
    restart: unless-stopped

  appsmith:
    image: appsmith/appsmith-ce:latest
    container_name: appsmith
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portal.rule=Host(`${DOMAIN_PORTAL}`)"
      - "traefik.http.routers.portal.entrypoints=websecure"
      - "traefik.http.routers.portal.tls.certresolver=letsencrypt"
      - "traefik.http.services.portal.loadbalancer.server.port=80"
      - "traefik.http.routers.portal.middlewares=security-headers@file"
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_HOST: ${N8N_HOST}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      WEBHOOK_URL: ${WEBHOOK_URL}
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${DOMAIN_N8N}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.middlewares=security-headers@file"
    restart: unless-stopped

networks:
  traefik-network:
    driver: bridge

volumes:
  letsencrypt:
  pgdata:
